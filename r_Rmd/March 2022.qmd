---
title: "March 2022: Trying Quarto"
format:
  html:
    theme: flatly
    toc: true
knit: crsp::knit_html_to_outputs
---

For March, I am going to try using a [Quarto](https://quarto.org/docs/get-started/hello/rstudio.html) document. It is similar to Rmarkdown, but I just found out about it and want to see how it differs.

```{r setup, include = FALSE}

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  echo = FALSE,
  fig.retina = 3,
  fig.path = here::here("exports", "March_2022", "/")
)

pacman::p_load(janitor, pacman, rio, skimr, here, conflicted,
               tidyverse, crsp, gt)

conflict_prefer("clean_names", "janitor")
conflict_prefer("filter", "dplyr")

theme_set(theme_bw(base_size = 15) + theme(legend.position = "bottom"))
```

# 20220301: Initial Quarto Setup and Testing

```{r}
#| label: test-plot
#| include: true
#| echo: true

data(mpg, package = "ggplot2")

mpg %>% 
  ggplot(aes(cty, hwy, color = cyl)) + 
  geom_jitter(shape = 21, 
              fill = "#1D4289", color = "#B1B3B3", alpha = 0.7, 
              size = 3) + 
  geom_smooth(method = "lm", color = "#C8102E", 
              lty = 2, size = 0.5) + 
  facet_wrap(~ drv)
  
```

# 20220302 and 20220303: Trying Challenge #1 of the [Unlocked](https://www.hp.com/us-en/workstations/industries/data-science/unlocked-challenge.html) [Challenge](https://github.com/Z-Unlocked/Unlocked_Challenge_1)

```{r data-import, include = FALSE}

p_load(rnaturalearth, rnaturalearthdata, maps, sp, sf, rgeos, gganimate, paletteer)

world <- ne_countries(returnclass = 'sf')

energy_use <- cs_import(here("data", "z_hp", "challenge-1", "energy_use_data_11-29-2021.csv")) 

energy_use %>% 
  group_by(year, item) %>% 
  summarize(mean(value))

energy_use %>% 
  group_by(item) %>% 
  summarize(mn = mean(value)) %>% 
  arrange(-mn)

e2 <- energy_use %>% 
  filter(item_code %in% c(6807, 6801, 6809, 6803)) %>% 
  mutate(type = case_when(str_detect(item, "as") ~ "Gas",
                         TRUE ~ item)) %>% 
  filter(year %in% c(1990, 2019)) %>% 
  rename(use_kilotonnes = value) %>% 
  select(area_code_iso3, area, type, item, year, use_kilotonnes) %>% 
  pivot_wider(names_from = year, values_from = use_kilotonnes) %>% 
  rowwise() %>% 
  mutate(pct_change = ((`2019` - `1990`) / `1990`) * 100)

# e3 <- e2 %>% 
#   select(area_code_iso3, area, type, pct_change) %>% 
#   filter(!is.na(pct_change)) %>% 
#   pivot_wider(names_from = type, values_from = pct_change) %>% 
#   bi_class(x = Gas, y = Electricity, style = "fisher", dim = 3) %>% 
#   right_join(world, by = c("area_code_iso3" = "iso_a3"))


# browseURL("https://slu-opengis.github.io/biscale/articles/biscale.html")
```

```{r map, eval = FALSE}
legend <- bi_legend(pal = "DkBlue",
                    dim = 3,
                    xlab = "Higher Gas ",
                    ylab = "Higher Electricity ",
                    size = 8)

map <- ggplot(data = e3, aes(fill = bi_class, geometry = geometry)) + 
  geom_sf(show.legend = FALSE) + 
  bi_scale_fill(pal = "DkBlue", dim = 3) +
  bi_theme()

ggdraw() +
  draw_plot(map, 0, 0, 1, 1) +
  draw_plot(legend, 0.2, .65, 0.2, 0.2)
```

# 20220304, 07 and 09: Still working on Unlocked Challenge #1

```{r new-plot, eval = FALSE}

waste <- cs_import(here("data", "z_hp", "challenge-1", "waste_disposal_data_11-29-2021.csv")) %>% remove_constant() %>% 
  select(-c(flag, flag_description)) %>% 
  rename(incinerated_waste_kt = value) 

# skim(waste)

w2 <- world %>% 
  select(area_code_iso3 = iso_a3, geometry) %>% 
  left_join(waste) %>% 
  mutate(test = log10(incinerated_waste_kt))

w2 %>% 
  filter(!is.na(year), year %in% c(2019)) %>% 
  ggplot(aes(fill = incinerated_waste_kt, geometry = geometry)) +
  geom_sf() + 
  scale_fill_paletteer_c("grDevices::YlOrRd", direction = -1, na.value="yellow") +
  facet_wrap(~ year) + 
  theme_void() + 
  guides(fill = guide_colorbar(barwidth = 20, barheight = 1, title.position = "top", 
                               title = "Total Incinerated Waste (kilotonnes) in 2019")) +
  theme(legend.position = "bottom", legend.direction = "horizontal")
```

```{r animated-plot, eval = FALSE}
w2 %>% 
  filter(!is.na(year)) %>% 
  ggplot(aes(geometry = geometry, fill = incinerated_waste_kt)) + 
  geom_sf(color = "black", size = 0.5) + 
  transition_states(as.factor(year), transition_length = 2, state_length = 2) + 
  scale_fill_paletteer_c("grDevices::Red-Purple", direction = -1) +
  theme_void() + 
  labs(fill = "Total Waste Incinerated (kilotonnes)", title = "Year: {closest_state}") + 
  guides(fill = guide_colorbar(barwidth = 20, barheight = 1, title.position = "top")) +
  theme(legend.position = "bottom", legend.direction = "horizontal")


anim_save(filename = here("exports", "March_2022", "waste.gif"))
```

```{r, eval = FALSE}
land <- cs_import(here("data", "z_hp", "challenge-1", "land_cover_data_11-30-2021.csv")) %>% remove_constant() %>% 
  select(-c(flag, flag_description)) %>% 
  rename(land_area_1000ha = value) 


l2 <- world %>% 
  select(area_code_iso3 = iso_a3, geometry) %>% 
  left_join(land) %>% 
  mutate(log_area = log10(land_area_1000ha))



land_use_map <- l2 %>% 
  filter(year %in% c(2018)) %>% 
  filter(item == "Tree-covered areas") %>% 
  ggplot(aes(fill = land_area_1000ha, geometry = geometry)) +
  geom_sf() + 
  scale_fill_paletteer_c("grDevices::Greens 2", direction = -1, na.value="white", trans = "log10") +
  facet_wrap(~ year) + 
  theme_void() + 
  guides(fill = guide_colorbar(barwidth = 20, barheight = 1, title.position = "top", 
                               title = "Tree-covered areas (1000 hectares) in 2018")) +
  theme(legend.position = "bottom", legend.direction = "horizontal")

ggsave(plot = land_use_map, filename = here("outputs", "z_hp", "Challenge 1 Land Use 2018.png"))

```

```{r land-use-final, include = TRUE}
knitr::include_graphics(path = here("outputs", "z_hp", "Challenge 1 Land Use 2018.png"))
```

# 20220310, 20220311, 20220314-16: Unlocked Challenge #2 - Natural Language Processing.

```{r z2-setup, eval = FALSE}
p_load(tidytext, wordcloud, reshape2, topicmodels, gt, gtExtras)

# browseURL("https://www.tidytextmining.com/")
# browseURL("https://cran.r-project.org/web/packages/tidytext/vignettes/tidytext.html")
# browseURL("https://angela-wong.medium.com/import-and-combine-multiple-text-files-from-a-folder-with-r-and-sub-folders-f69ef308977f")

txt_files <- list.files(here("data", "z_hp", "challenge-2", "challenge2-articles"),
                        pattern = "txt", full.names = TRUE, recursive = TRUE)

texts <- data.frame(file = character(),
                    paragraph = as.numeric(),
                    text = character(),
                    stringsAsFactors = FALSE)

for (i in 1:length(txt_files)) {
  p <- read.delim(txt_files[i],
                  header = FALSE,
                  col.names = "text",
                  stringsAsFactors = FALSE) # read.delim here is automatically splitting by paragraph
  p <- p %>% mutate(file = sub(".txt", "", x = txt_files[i]), # add filename as label
                    paragraph = row_number()) # add paragraph number
  texts <- bind_rows(texts, p) # adds to existing dataframe
}

texts2 <- texts %>%
  mutate(text = str_replace(text, "La Eterna", "la_eterna"))

words <- texts2 %>% 
  unnest_tokens(word, text) %>%  # creates dataframe with one word per row, indexed
  mutate(file_number = substr(file, nchar(file) - 2, nchar(file)),
         word = str_remove(word, "â|œ"))

cleaned_words <- words %>% 
  anti_join(get_stopwords())

bing <- get_sentiments("bing")
```

```{r wordcloud-1, eval = FALSE}
cleaned_words %>% 
  count(word) %>% 
  with(wordcloud(word, n, max.words = 100))

cleaned_words %>% 
  inner_join(bing) %>%
  count(word, sentiment, sort = TRUE) %>%
  acast(word ~ sentiment, value.var = "n", fill = 0) %>%
  comparison.cloud(colors = c("#F8766D", "#00BFC4"),
                   max.words = 100)
```

```{r lda-test, eval = FALSE}
# browseURL("https://www.tidytextmining.com/topicmodeling.html")

words_dtm <- cleaned_words %>% 
  group_by(paragraph, word) %>% 
  summarize(count = n()) %>% 
  cast_dtm(paragraph, word, count)

all_terms <- LDA(words_dtm, k = 6)



all_sum <- all_terms %>% 
  tidy() %>% 
  group_by(topic) %>% 
  slice_max(beta, n = 10) %>% 
  ungroup() %>% 
  arrange(topic, beta)

all_sum %>% 
  filter(nchar(term) > 2) %>% 
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()

(lda_sum <- all_terms %>% 
  tidy() %>% 
  filter(nchar(term) > 2, 
         !term %in% c("also", "can", "many", "eterna")) %>% 
  group_by(topic) %>% 
  slice_max(beta, n = 10) %>% 
  ungroup() %>% 
  select(-beta) %>% 
  pivot_wider(names_from = topic, values_from = term, values_fn = list) %>% 
  unnest(cols = everything()) %>% 
  gt() %>% 
  tab_header(md("**La Eterna LDA Modeling**"), 
             subtitle = "Top 10 words when using 6 topics") %>% 
  tab_source_note(md("**Data Source**: Z by HP Unlocked Challenge")) %>% 
  cols_align(align = "center", columns = everything()) %>% 
  cols_width(everything() ~ px(100)) %>% 
  gt_theme_nytimes()
)
  

gtsave(lda_sum, filename = here("data", "z_hp", "challenge-2", "LDA Summary Table.png"))

```

```{r lda-final, include = TRUE}
knitr::include_graphics(path = here("data", "z_hp", "challenge-2", "LDA Summary Table.png"))
```


# 20220317: Trying something new

I don't know enough about audio or image analysis in R to try Challenges #3 and #4 of the Unlocked Challenge.

Trying {flametree}

```{r flametree-setup, include = FALSE}
p_load(flametree)

shades <- c("#FED789", "#023743", "#72874E", "#476F84", "#A4BED5", "#453947")

dat <- flametree_grow(time = 10, trees = 6)
```


```{r flametree-plots, include = TRUE}
dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = shades, 
    style = "plain"
  )

dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = shades, 
    style = "voronoi"
  )

dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = shades, 
    style = "nativeflora"
  )

dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = shades, 
    style = "wisp"
  )

dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = rev(shades), 
    style = "minimal"
  )
```

# 20220318: Looking into [renv](https://rstudio.github.io/renv/index.html)

{renv} is a package that allows you to create a file for each project that maintains a record of which versions of R and packages were used in the project. 

[Here is an intro to renv.](https://rstudio.github.io/renv/articles/renv.html)



```{r renv-setup, include = FALSE}
p_load(renv)

# browseURL("https://rstudio.github.io/renv/articles/renv.html")
```